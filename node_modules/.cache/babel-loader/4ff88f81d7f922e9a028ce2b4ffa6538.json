{"ast":null,"code":"var _jsxFileName = \"/home/wisam/Code/quotopia/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Quote from \"./Quote\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const apiUrl = \"https://type.fit/api/quotes\";\n  const bbApi = \"https://breakingbadapi.com/api/quote\";\n  const bbRandom = \"/random\";\n  const bbAll = \"s\"; //make it that every button className has the api url var, like \"/random\" and \"s\"\n\n  const [quotes, setQuotes] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState(\"out\"); //Run on page load\n\n  useEffect(() => {\n    getQuotes([]);\n  }, [query]);\n\n  async function getQuotes(url) {\n    // Storing response\n    const response = await fetch(bbApi + bbAll); // Storing data in form of JSON\n\n    var data = await response.json();\n    setQuotes(data);\n    console.log(data[0]);\n  } //getQuotes([]);\n  //Fetch from the API, doesnt work for some\n\n  /* const getQuots2 = async () => {\n    setQuotes();\n    const request = await fetch(bbApi);\n    var data = request.json();\n    setQuotes(data);\n    console.log(data[1]);\n  };\n  */\n\n\n  const updateSearch = e => {\n    setSearch(e.target.value);\n    console.log(search);\n  };\n\n  const getSearch = e => {\n    e.preventDefault();\n    setQuery(search);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: getSearch,\n      className: \"search-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"search-bar\",\n        type: \"text\",\n        value: search,\n        onChange: updateSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"search-btn\",\n        type: \"submit\",\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), quotes.map(quote => /*#__PURE__*/_jsxDEV(Quote, {\n      title: quote.quote,\n      author: quote.author\n    }, quote.quote_id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"Cvba2leZp80vLoMx1c46/5JMf6g=\");\n\n_c = App;\nexport default App; //!siiiuu\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/wisam/Code/quotopia/src/App.js"],"names":["React","useEffect","useState","Quote","App","apiUrl","bbApi","bbRandom","bbAll","quotes","setQuotes","search","setSearch","query","setQuery","getQuotes","url","response","fetch","data","json","console","log","updateSearch","e","target","value","getSearch","preventDefault","map","quote","author","quote_id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAO,WAAP;;;AACA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAMC,MAAM,GAAG,6BAAf;AACA,QAAMC,KAAK,GAAG,sCAAd;AACA,QAAMC,QAAQ,GAAG,SAAjB;AACA,QAAMC,KAAK,GAAG,GAAd,CAJgB,CAKhB;;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACS,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACW,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,KAAD,CAAlC,CARgB,CAShB;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACdc,IAAAA,SAAS,CAAC,EAAD,CAAT;AACD,GAFQ,EAEN,CAACF,KAAD,CAFM,CAAT;;AAIA,iBAAeE,SAAf,CAAyBC,GAAzB,EAA8B;AAC5B;AACA,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACZ,KAAK,GAAGE,KAAT,CAA5B,CAF4B,CAI5B;;AACA,QAAIW,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAjB;AACAV,IAAAA,SAAS,CAACS,IAAD,CAAT;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAI,CAAC,CAAD,CAAhB;AACD,GAtBe,CAuBhB;AACA;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,QAAMI,YAAY,GAAIC,CAAD,IAAO;AAC1BZ,IAAAA,SAAS,CAACY,CAAC,CAACC,MAAF,CAASC,KAAV,CAAT;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAYX,MAAZ;AACD,GAHD;;AAIA,QAAMgB,SAAS,GAAIH,CAAD,IAAO;AACvBA,IAAAA,CAAC,CAACI,cAAF;AACAd,IAAAA,QAAQ,CAACH,MAAD,CAAR;AACD,GAHD;;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAM,MAAA,QAAQ,EAAEgB,SAAhB;AAA2B,MAAA,SAAS,EAAC,aAArC;AAAA,8BACE;AACE,QAAA,SAAS,EAAC,YADZ;AAEE,QAAA,IAAI,EAAC,MAFP;AAGE,QAAA,KAAK,EAAEhB,MAHT;AAIE,QAAA,QAAQ,EAAEY;AAJZ;AAAA;AAAA;AAAA;AAAA,cADF,eAOE;AAAQ,QAAA,SAAS,EAAC,YAAlB;AAA+B,QAAA,IAAI,EAAC,QAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAYGd,MAAM,CAACoB,GAAP,CAAYC,KAAD,iBACV,QAAC,KAAD;AAAO,MAAA,KAAK,EAAEA,KAAK,CAACA,KAApB;AAA2B,MAAA,MAAM,EAAEA,KAAK,CAACC;AAAzC,OAAsDD,KAAK,CAACE,QAA5D;AAAA;AAAA;AAAA;AAAA,YADD,CAZH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD,CA3DD;;GAAM5B,G;;KAAAA,G;AA4DN,eAAeA,GAAf,C,CAEA","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Quote from \"./Quote\";\nimport \"./App.css\";\nconst App = () => {\n  const apiUrl = \"https://type.fit/api/quotes\";\n  const bbApi = \"https://breakingbadapi.com/api/quote\";\n  const bbRandom = \"/random\";\n  const bbAll = \"s\";\n  //make it that every button className has the api url var, like \"/random\" and \"s\"\n  const [quotes, setQuotes] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState(\"out\");\n  //Run on page load\n  useEffect(() => {\n    getQuotes([]);\n  }, [query]);\n\n  async function getQuotes(url) {\n    // Storing response\n    const response = await fetch(bbApi + bbAll);\n\n    // Storing data in form of JSON\n    var data = await response.json();\n    setQuotes(data);\n    console.log(data[0]);\n  }\n  //getQuotes([]);\n  //Fetch from the API, doesnt work for some\n  /* const getQuots2 = async () => {\n    setQuotes();\n    const request = await fetch(bbApi);\n    var data = request.json();\n    setQuotes(data);\n    console.log(data[1]);\n  };\n*/\n  const updateSearch = (e) => {\n    setSearch(e.target.value);\n    console.log(search);\n  };\n  const getSearch = (e) => {\n    e.preventDefault();\n    setQuery(search);\n  };\n  return (\n    <div className=\"App\">\n      <form onSubmit={getSearch} className=\"search-form\">\n        <input\n          className=\"search-bar\"\n          type=\"text\"\n          value={search}\n          onChange={updateSearch}\n        />\n        <button className=\"search-btn\" type=\"submit\">\n          Search\n        </button>\n      </form>\n      {quotes.map((quote) => (\n        <Quote title={quote.quote} author={quote.author} key={quote.quote_id} />\n      ))}\n    </div>\n  );\n};\nexport default App;\n\n//!siiiuu\n"]},"metadata":{},"sourceType":"module"}