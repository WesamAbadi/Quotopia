{"ast":null,"code":"var _jsxFileName = \"/home/wisam/Code/quotopia/src/App.js\";\nimport React, { useEffect, useState } from \"react\";\nimport Pages from \"./pages/Pages\";\nimport \"./App.css\";\nimport Quote from \"./Quote\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  /* const apiUrl = \"https://type.fit/api/quotes\";\n  const bbApi = \"https://breakingbadapi.com/api/quote\";\n  const bbRandom = \"/random\";\n  const bbAll = \"s\";\n  //make it that every button className has the api url var, like \"/random\" and \"s\"\n  const [quotes, setQuotes] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState(\"out\");\n  //Run on page load\n  useEffect(() => {\n    getQuotes([]);\n  }, [query]);\n   async function getQuotes(url) {\n    // Storing response\n    const response = await fetch(bbApi + bbAll);\n     // Storing data in form of JSON\n    var data = await response.json();\n    setQuotes(data);\n    //console.log(data[0]);\n  }\n  //getQuotes([]);\n  //Fetch from the API, doesnt work for some\n  /* const getQuots2 = async () => {\n    setQuotes();\n    const request = await fetch(bbApi);\n    var data = request.json();\n    setQuotes(data);\n    console.log(data[1]);\n  };\n  const updateSearch = (e) => {\n    setSearch(e.target.value);\n    console.log(search);\n  };\n  const getSearch = (e) => {\n    e.preventDefault();\n    setQuery(search);\n    //setSearch(\"\"); //sets the search bar empty again\n  };\n  */\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: quotes.map(quote => /*#__PURE__*/_jsxDEV(Quote, {\n      title: quote.quote,\n      author: quote.author\n    }, quote.quote_id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n\n_c = App;\nexport default App; //!siiiuuuu\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/wisam/Code/quotopia/src/App.js"],"names":["React","useEffect","useState","Pages","Quote","App","quotes","map","quote","author","quote_id"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,eAAlB;AACA,OAAO,WAAP;AAEA,OAAOC,KAAP,MAAkB,SAAlB;;;AACA,MAAMC,GAAG,GAAG,MAAM;AAChB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGE,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,cAcGC,MAAM,CAACC,GAAP,CAAYC,KAAD,iBACV,QAAC,KAAD;AAAO,MAAA,KAAK,EAAEA,KAAK,CAACA,KAApB;AAA2B,MAAA,MAAM,EAAEA,KAAK,CAACC;AAAzC,OAAsDD,KAAK,CAACE,QAA5D;AAAA;AAAA;AAAA;AAAA,YADD;AAdH;AAAA;AAAA;AAAA;AAAA,UADF;AAoBD,CA9DD;;KAAML,G;AA+DN,eAAeA,GAAf,C,CAEA","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Pages from \"./pages/Pages\";\nimport \"./App.css\";\n\nimport Quote from \"./Quote\";\nconst App = () => {\n  /* const apiUrl = \"https://type.fit/api/quotes\";\n  const bbApi = \"https://breakingbadapi.com/api/quote\";\n  const bbRandom = \"/random\";\n  const bbAll = \"s\";\n  //make it that every button className has the api url var, like \"/random\" and \"s\"\n  const [quotes, setQuotes] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState(\"out\");\n  //Run on page load\n  useEffect(() => {\n    getQuotes([]);\n  }, [query]);\n\n  async function getQuotes(url) {\n    // Storing response\n    const response = await fetch(bbApi + bbAll);\n\n    // Storing data in form of JSON\n    var data = await response.json();\n    setQuotes(data);\n    //console.log(data[0]);\n  }\n  //getQuotes([]);\n  //Fetch from the API, doesnt work for some\n  /* const getQuots2 = async () => {\n    setQuotes();\n    const request = await fetch(bbApi);\n    var data = request.json();\n    setQuotes(data);\n    console.log(data[1]);\n  };\n  const updateSearch = (e) => {\n    setSearch(e.target.value);\n    console.log(search);\n  };\n  const getSearch = (e) => {\n    e.preventDefault();\n    setQuery(search);\n    //setSearch(\"\"); //sets the search bar empty again\n  };\n  */\n  return (\n    <div className=\"App\">\n      {/*  <form onSubmit={getSearch} className=\"search-form\">\n        <input\n          className=\"search-bar\"\n          type=\"text\"\n          value={search}\n          onChange={updateSearch}\n        />\n        <button className=\"search-btn\" type=\"submit\">\n          Search\n        </button>\n        <Pages />\n      </form>\n      */}\n      {quotes.map((quote) => (\n        <Quote title={quote.quote} author={quote.author} key={quote.quote_id} />\n      ))}\n    </div>\n  );\n};\nexport default App;\n\n//!siiiuuuu\n"]},"metadata":{},"sourceType":"module"}