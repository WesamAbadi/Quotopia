{"ast":null,"code":"var _jsxFileName = \"/home/wisam/Code/quotopia/src/components/Quote.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Quote(_ref) {\n  _s();\n\n  let {\n    title,\n    author\n  } = _ref;\n  const apiUrl = \"https://type.fit/api/quotes\";\n  const bbApi = \"https://breakingbadapi.com/api/quote/random\";\n  const bbRandom = \"/random\";\n  const bbAll = \"s\"; //make it that every button className has the api url var, like \"/random\" and \"s\"\n\n  const [quotes, setQuotes] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState(\"out\"); //Run on page load\n\n  useEffect(() => {\n    getQuotes([]);\n  }, [query]);\n\n  async function getQuotes(url) {\n    // Storing response\n    const response = await fetch(bbApi); // Storing data in form of JSON\n\n    var data = await response.json();\n    setQuotes(data); //console.log(data[0]);\n  } //getQuotes([]);\n  //Fetch from the API, doesnt work for some\n\n  /* const getQuots2 = async () => {\n    setQuotes();\n    const request = await fetch(bbApi);\n    var data = request.json();\n    setQuotes(data);\n    console.log(data[1]);\n  };\n  */\n\n\n  const updateSearch = e => {\n    setSearch(e.target.value);\n    console.log(search);\n  };\n\n  const getSearch = e => {\n    e.preventDefault();\n    setQuery(search); //setSearch(\"\"); //sets the search bar empty again\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [quotes.map(quote => /*#__PURE__*/_jsxDEV(Quote, {\n      title: quote.quote,\n      author: quote.author\n    }, quote.quote_id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: author\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: \"\",\n      alt: \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Quote, \"Cvba2leZp80vLoMx1c46/5JMf6g=\");\n\n_c = Quote;\nexport default Quote;\n\nvar _c;\n\n$RefreshReg$(_c, \"Quote\");","map":{"version":3,"sources":["/home/wisam/Code/quotopia/src/components/Quote.js"],"names":["React","useEffect","useState","Quote","title","author","apiUrl","bbApi","bbRandom","bbAll","quotes","setQuotes","search","setSearch","query","setQuery","getQuotes","url","response","fetch","data","json","updateSearch","e","target","value","console","log","getSearch","preventDefault","map","quote","quote_id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;AAEA,SAASC,KAAT,OAAkC;AAAA;;AAAA,MAAnB;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAmB;AAChC,QAAMC,MAAM,GAAG,6BAAf;AACA,QAAMC,KAAK,GAAG,6CAAd;AACA,QAAMC,QAAQ,GAAG,SAAjB;AACA,QAAMC,KAAK,GAAG,GAAd,CAJgC,CAKhC;;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACU,MAAD,EAASC,SAAT,IAAsBX,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACY,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,CAAC,KAAD,CAAlC,CARgC,CAShC;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,SAAS,CAAC,EAAD,CAAT;AACD,GAFQ,EAEN,CAACF,KAAD,CAFM,CAAT;;AAIA,iBAAeE,SAAf,CAAyBC,GAAzB,EAA8B;AAC5B;AACA,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACZ,KAAD,CAA5B,CAF4B,CAI5B;;AACA,QAAIa,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAjB;AACAV,IAAAA,SAAS,CAACS,IAAD,CAAT,CAN4B,CAO5B;AACD,GAtB+B,CAuBhC;AACA;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,QAAME,YAAY,GAAIC,CAAD,IAAO;AAC1BV,IAAAA,SAAS,CAACU,CAAC,CAACC,MAAF,CAASC,KAAV,CAAT;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYf,MAAZ;AACD,GAHD;;AAIA,QAAMgB,SAAS,GAAIL,CAAD,IAAO;AACvBA,IAAAA,CAAC,CAACM,cAAF;AACAd,IAAAA,QAAQ,CAACH,MAAD,CAAR,CAFuB,CAGvB;AACD,GAJD;;AAMA,sBACE;AAAA,eACGF,MAAM,CAACoB,GAAP,CAAYC,KAAD,iBACV,QAAC,KAAD;AAAO,MAAA,KAAK,EAAEA,KAAK,CAACA,KAApB;AAA2B,MAAA,MAAM,EAAEA,KAAK,CAAC1B;AAAzC,OAAsD0B,KAAK,CAACC,QAA5D;AAAA;AAAA;AAAA;AAAA,YADD,CADH,eAIE;AAAA,gBAAK5B;AAAL;AAAA;AAAA;AAAA;AAAA,YAJF,eAKE;AAAA,gBAAIC;AAAJ;AAAA;AAAA;AAAA;AAAA,YALF,eAME;AAAK,MAAA,GAAG,EAAC,EAAT;AAAY,MAAA,GAAG,EAAC;AAAhB;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAUD;;GArDQF,K;;KAAAA,K;AAuDT,eAAeA,KAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nfunction Quote({ title, author }) {\n  const apiUrl = \"https://type.fit/api/quotes\";\n  const bbApi = \"https://breakingbadapi.com/api/quote/random\";\n  const bbRandom = \"/random\";\n  const bbAll = \"s\";\n  //make it that every button className has the api url var, like \"/random\" and \"s\"\n  const [quotes, setQuotes] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState(\"out\");\n  //Run on page load\n  useEffect(() => {\n    getQuotes([]);\n  }, [query]);\n\n  async function getQuotes(url) {\n    // Storing response\n    const response = await fetch(bbApi);\n\n    // Storing data in form of JSON\n    var data = await response.json();\n    setQuotes(data);\n    //console.log(data[0]);\n  }\n  //getQuotes([]);\n  //Fetch from the API, doesnt work for some\n  /* const getQuots2 = async () => {\n    setQuotes();\n    const request = await fetch(bbApi);\n    var data = request.json();\n    setQuotes(data);\n    console.log(data[1]);\n  };\n*/\n  const updateSearch = (e) => {\n    setSearch(e.target.value);\n    console.log(search);\n  };\n  const getSearch = (e) => {\n    e.preventDefault();\n    setQuery(search);\n    //setSearch(\"\"); //sets the search bar empty again\n  };\n\n  return (\n    <div>\n      {quotes.map((quote) => (\n        <Quote title={quote.quote} author={quote.author} key={quote.quote_id} />\n      ))}\n      <h1>{title}</h1>\n      <p>{author}</p>\n      <img src=\"\" alt=\"\" />\n    </div>\n  );\n}\n\nexport default Quote;\n"]},"metadata":{},"sourceType":"module"}