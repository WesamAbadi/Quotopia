{"ast":null,"code":"var _jsxFileName = \"/home/wisam/Code/quotopia/src/components/Quote.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Quote(_ref) {\n  _s();\n\n  let {\n    title,\n    author\n  } = _ref;\n  const apiUrl = \"https://type.fit/api/quotes\";\n  const bbApi = \"https://breakingbadapi.com/api/quote\";\n  const bbRandom = \"/random\";\n  const bbAll = \"s\"; //make it that every button className has the api url var, like \"/random\" and \"s\"\n\n  const [quotes, setQuotes] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState(\"out\"); //Run on page load\n\n  useEffect(() => {\n    getQuotes([]);\n  }, []);\n\n  const getQuotes = async () => {\n    const api = await fetch(\"https://breakingbadapi.com/api/quotes\");\n    const data = await api.json();\n    setQuotes(data);\n    console.log(data);\n    console.log(data[0].quote);\n  }; //getQuotes([]);\n  //Fetch from the API, doesnt work for some\n\n  /* const getQuots2 = async () => {\n    setQuotes();\n    const request = await fetch(bbApi);\n    var data = request.json();\n    setQuotes(data);\n    console.log(data[1]);\n  };\n  */\n\n\n  const updateSearch = e => {\n    setSearch(e.target.value);\n    console.log(search);\n  };\n\n  const getSearch = e => {\n    e.preventDefault();\n    setQuery(search); //setSearch(\"\"); //sets the search bar empty again\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [quotes.map(quote => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: quote.quote\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: author\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: \"\",\n      alt: \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Quote, \"Cvba2leZp80vLoMx1c46/5JMf6g=\");\n\n_c = Quote;\nexport default Quote;\n\nvar _c;\n\n$RefreshReg$(_c, \"Quote\");","map":{"version":3,"sources":["/home/wisam/Code/quotopia/src/components/Quote.js"],"names":["React","useEffect","useState","Quote","title","author","apiUrl","bbApi","bbRandom","bbAll","quotes","setQuotes","search","setSearch","query","setQuery","getQuotes","api","fetch","data","json","console","log","quote","updateSearch","e","target","value","getSearch","preventDefault","map"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;AAEA,SAASC,KAAT,OAAkC;AAAA;;AAAA,MAAnB;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAmB;AAChC,QAAMC,MAAM,GAAG,6BAAf;AACA,QAAMC,KAAK,GAAG,sCAAd;AACA,QAAMC,QAAQ,GAAG,SAAjB;AACA,QAAMC,KAAK,GAAG,GAAd,CAJgC,CAKhC;;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACU,MAAD,EAASC,SAAT,IAAsBX,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACY,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,CAAC,KAAD,CAAlC,CARgC,CAShC;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,SAAS,CAAC,EAAD,CAAT;AACD,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMA,SAAS,GAAG,YAAY;AAC5B,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,uCAAD,CAAvB;AACA,UAAMC,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AACAT,IAAAA,SAAS,CAACQ,IAAD,CAAT;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAI,CAAC,CAAD,CAAJ,CAAQI,KAApB;AACD,GAND,CAdgC,CAqBhC;AACA;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,QAAMC,YAAY,GAAIC,CAAD,IAAO;AAC1BZ,IAAAA,SAAS,CAACY,CAAC,CAACC,MAAF,CAASC,KAAV,CAAT;AACAN,IAAAA,OAAO,CAACC,GAAR,CAAYV,MAAZ;AACD,GAHD;;AAIA,QAAMgB,SAAS,GAAIH,CAAD,IAAO;AACvBA,IAAAA,CAAC,CAACI,cAAF;AACAd,IAAAA,QAAQ,CAACH,MAAD,CAAR,CAFuB,CAGvB;AACD,GAJD;;AAMA,sBACE;AAAA,eACGF,MAAM,CAACoB,GAAP,CAAYP,KAAD,IAAW;AACrB,0BACE;AAAA,+BACE;AAAA,oBAAIA,KAAK,CAACA;AAAV;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF;AAKD,KANA,CADH,eAQE;AAAA,gBAAKnB;AAAL;AAAA;AAAA;AAAA;AAAA,YARF,eASE;AAAA,gBAAIC;AAAJ;AAAA;AAAA;AAAA;AAAA,YATF,eAUE;AAAK,MAAA,GAAG,EAAC,EAAT;AAAY,MAAA,GAAG,EAAC;AAAhB;AAAA;AAAA;AAAA;AAAA,YAVF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAcD;;GAvDQF,K;;KAAAA,K;AAyDT,eAAeA,KAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nfunction Quote({ title, author }) {\n  const apiUrl = \"https://type.fit/api/quotes\";\n  const bbApi = \"https://breakingbadapi.com/api/quote\";\n  const bbRandom = \"/random\";\n  const bbAll = \"s\";\n  //make it that every button className has the api url var, like \"/random\" and \"s\"\n  const [quotes, setQuotes] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState(\"out\");\n  //Run on page load\n  useEffect(() => {\n    getQuotes([]);\n  }, []);\n\n  const getQuotes = async () => {\n    const api = await fetch(\"https://breakingbadapi.com/api/quotes\");\n    const data = await api.json();\n    setQuotes(data);\n    console.log(data);\n    console.log(data[0].quote);\n  };\n  //getQuotes([]);\n  //Fetch from the API, doesnt work for some\n  /* const getQuots2 = async () => {\n    setQuotes();\n    const request = await fetch(bbApi);\n    var data = request.json();\n    setQuotes(data);\n    console.log(data[1]);\n  };\n*/\n  const updateSearch = (e) => {\n    setSearch(e.target.value);\n    console.log(search);\n  };\n  const getSearch = (e) => {\n    e.preventDefault();\n    setQuery(search);\n    //setSearch(\"\"); //sets the search bar empty again\n  };\n\n  return (\n    <div>\n      {quotes.map((quote) => {\n        return (\n          <div>\n            <p>{quote.quote}</p>\n          </div>\n        );\n      })}\n      <h1>{title}</h1>\n      <p>{author}</p>\n      <img src=\"\" alt=\"\" />\n    </div>\n  );\n}\n\nexport default Quote;\n"]},"metadata":{},"sourceType":"module"}