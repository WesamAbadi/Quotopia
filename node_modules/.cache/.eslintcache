[{"/home/wisam/Code/quotopia/src/index.js":"1","/home/wisam/Code/quotopia/src/App.js":"2","/home/wisam/Code/quotopia/src/reportWebVitals.js":"3","/home/wisam/Code/quotopia/src/pages/Home.jsx":"4","/home/wisam/Code/quotopia/src/components/Popular.jsx":"5","/home/wisam/Code/quotopia/src/pages/Pages.jsx":"6","/home/wisam/Code/quotopia/src/components/Got.jsx":"7","/home/wisam/Code/quotopia/src/components/Breaking.js":"8"},{"size":538,"mtime":1649598473910,"results":"9","hashOfConfig":"10"},{"size":1711,"mtime":1649515382866,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1648282856824,"results":"12","hashOfConfig":"10"},{"size":2061,"mtime":1649945782839,"results":"13","hashOfConfig":"10"},{"size":107,"mtime":1649926448411,"results":"14","hashOfConfig":"10"},{"size":151,"mtime":1649515345728,"results":"15","hashOfConfig":"10"},{"size":1837,"mtime":1649944807437,"results":"16","hashOfConfig":"10"},{"size":1823,"mtime":1649926405416,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ku39lf",{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},"/home/wisam/Code/quotopia/src/index.js",[],[],"/home/wisam/Code/quotopia/src/App.js",["47","48"],[],"import React, { useEffect, useState } from \"react\";\nimport Pages from \"./pages/Pages\";\nimport \"./App.css\";\n\nconst App = () => {\n  /* const apiUrl = \"https://type.fit/api/quotes\";\n  const bbApi = \"https://breakingbadapi.com/api/quote\";\n  const bbRandom = \"/random\";\n  const bbAll = \"s\";\n  //make it that every button className has the api url var, like \"/random\" and \"s\"\n  const [quotes, setQuotes] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState(\"out\");\n  //Run on page load\n  useEffect(() => {\n    getQuotes([]);\n  }, [query]);\n\n  async function getQuotes(url) {\n    // Storing response\n    const response = await fetch(bbApi + bbAll);\n\n    // Storing data in form of JSON\n    var data = await response.json();\n    setQuotes(data);\n    //console.log(data[0]);\n  }\n  //getQuotes([]);\n  //Fetch from the API, doesnt work for some\n  /* const getQuots2 = async () => {\n    setQuotes();\n    const request = await fetch(bbApi);\n    var data = request.json();\n    setQuotes(data);\n    console.log(data[1]);\n  };\n  const updateSearch = (e) => {\n    setSearch(e.target.value);\n    console.log(search);\n  };\n  const getSearch = (e) => {\n    e.preventDefault();\n    setQuery(search);\n    //setSearch(\"\"); //sets the search bar empty again\n  };\n  */\n  return (\n    <div className=\"App\">\n      {/*  <form onSubmit={getSearch} className=\"search-form\">\n        <input\n          className=\"search-bar\"\n          type=\"text\"\n          value={search}\n          onChange={updateSearch}\n        />\n        <button className=\"search-btn\" type=\"submit\">\n          Search\n        </button>\n        </form>\n      */}\n      <Pages />\n    </div>\n  );\n};\nexport default App;\n\n//!siiiuuuu\n",["49","50"],"/home/wisam/Code/quotopia/src/reportWebVitals.js",[],[],"/home/wisam/Code/quotopia/src/pages/Home.jsx",["51"],[],"import Got from \"../components/Got\";\nimport Popular from \"../components/Popular\";\nimport Breaking from \"../components/Breaking\";\nimport styled from \"styled-components\";\nimport \"./Home.css\";\nimport React, { useState, useEffect } from \"react\";\n\nfunction Home() {\n  const [stateB, setStateB] = useState(false);\n  const [stateG, setStateG] = useState(false);\n  const [clear, setclear] = useState(false);\n\n  //Make UseEffect on a refresh button, fetch only first time.\n\n  function renderMe(show) {\n    if (show === \"G\") {\n      setStateG(true);\n      setStateB(false);\n      setclear(true);\n    } else if (show === \"B\") {\n      setStateG(false);\n      setStateB(true);\n      setclear(true);\n    }\n  }\n  let initialState = () => {\n    setStateG(false);\n    setStateB(false);\n    setclear(false);\n  };\n\n  return (\n    <Body>\n      <Test>\n        <Title>\n          <h1>Quotopia!</h1>\n          {!clear && <h4>Choose your show</h4>}\n        </Title>\n        <button onClick={() => renderMe(\"G\")}>Game of Thrones</button>\n        <button onClick={() => renderMe(\"B\")}>Breaking Bad</button>\n        {clear === true && (\n          <button id=\"clear-btn\" onClick={() => initialState()}>\n            Clear\n          </button>\n        )}\n        <button id=\"info\">i</button>\n\n        <Main>\n          {(stateG || stateB) && (\n            <Container>\n              <Popular />\n              {stateG && <Got />}\n              {stateB && <Breaking />}\n            </Container>\n          )}\n        </Main>\n      </Test>\n    </Body>\n  );\n}\nconst Main = styled.div``;\nconst Test = styled.div`\n  padding-top: 10%;\n`;\nconst Body = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 90vh;\n`;\n\nconst Title = styled.div`\n  padding-bottom: 30px;\n`;\n\nconst Container = styled.div`\n  animation: appear;\n  animation-duration: 1.1s;\n  margin: auto;\n  padding: 15px;\n  border: 0.3rem solid whitesmoke;\n  border-radius: 1rem;\n  max-height: 800px;\n  width: 90%;\n  overflow: scroll;\n  overflow-x: hidden;\n  scroll-behavior: smooth;\n`;\n\nexport default Home;\n","/home/wisam/Code/quotopia/src/components/Popular.jsx",[],[],"/home/wisam/Code/quotopia/src/pages/Pages.jsx",[],[],"/home/wisam/Code/quotopia/src/components/Got.jsx",["52"],[],"import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nfunction Got() {\n  const [popular, setPopular] = useState([]);\n\n  useEffect(() => {\n    getPopular();\n  }, []);\n\n  const getPopular = async () => {\n    const api = await fetch(\n      \"https://game-of-thrones-quotes.herokuapp.com/v1/random/5\"\n    );\n    const data = await api.json();\n    setPopular(data);\n    console.log(data);\n  };\n  let image;\n  return (\n    <Main>\n      <h1>I AM GAME OF THRONES!</h1>\n      <br />\n      {popular.map((line) => {\n        const images = line.character.house.slug;\n        //start the switch\n        switch (images) {\n          case \"lannister\":\n            line.image = require(\"../images/Lannister.png\");\n            break;\n          case \"baratheon\":\n            line.image = require(\"../images/Baratheon.png\");\n            break;\n          case \"stark\":\n            line.image = require(\"../images/Stark.png\");\n            break;\n          case \"targaryen\":\n            line.image = require(\"../images/Targaryen.png\");\n            break;\n          default:\n            line.image = require(\"../images/GOT2.png\");\n            console.log(`No image for ${images}.`);\n        }\n\n        return (\n          <Block key={line.sentence}>\n            <T1>\n              <p>{line.sentence}</p>\n            </T1>\n            <T2>\n              <img src={line.image} alt=\"\" />\n            </T2>\n\n            <img src={require(\"../images/line.png\")} alt=\"\" />\n          </Block>\n        );\n      })}\n    </Main>\n  );\n}\nconst Main = styled.div`\n  font-family: \"GOTfont\";\n`;\nconst Block = styled.div`\n  text-align: center;\n  font-family: \"GOTfont\";\n  font-weight: bold;\n`;\nconst T1 = styled.div`\n  float: right;\n  text-align: justify;\n  width: 80%;\n`;\nconst T2 = styled.div`\n  text-align: left;\n`;\n\nexport default Got;\n","/home/wisam/Code/quotopia/src/components/Breaking.js",["53","54","55","56","57","58","59","60"],[],"import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nfunction Breaking({ title, author }) {\n  const apiUrl = \"https://type.fit/api/quotes\";\n  const bbApi = \"https://breakingbadapi.com/api/quote\";\n  const bbRandom = \"/random\";\n  const bbAll = \"s\";\n  //make it that every button className has the api url var, like \"/random\" and \"s\"\n  const [quotes, setQuotes] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState(\"out\");\n  //Run on page load\n  useEffect(() => {\n    getQuotes([]);\n  }, []);\n\n  const getQuotes = async () => {\n    const api = await fetch(\"https://breakingbadapi.com/api/quotes\");\n    const data = await api.json();\n    setQuotes(data);\n    console.log(data);\n  };\n  //getQuotes([]);\n  //Fetch from the API, doesnt work for some\n  /* const getQuots2 = async () => {\n    setQuotes();\n    const request = await fetch(bbApi);\n    var data = request.json();\n    setQuotes(data);\n    console.log(data[1]);\n  };\n*/\n  const updateSearch = (e) => {\n    setSearch(e.target.value);\n    console.log(search);\n  };\n  const getSearch = (e) => {\n    e.preventDefault();\n    setQuery(search);\n    //setSearch(\"\"); //sets the search bar empty again\n  };\n\n  return (\n    <div>\n      <Block>\n        <h1>I am breaking bad</h1>\n      </Block>\n      {quotes.map((quote) => {\n        if (quote.quote_id <= 8) {\n          return (\n            <div key={quote.quote_id}>\n              <Block>\n                <p>{quote.quote}</p>\n              </Block>\n              <h3>---</h3>\n            </div>\n          );\n        }\n      })}\n      <h1>{title}</h1>\n      <p>{author}</p>\n      <img src=\"\" alt=\"\" />\n    </div>\n  );\n}\n//wee\nconst Block = styled.div`\n  text-align: center;\n  font-family: \"BBfont\";\n  font-size: 30px;\n`;\nexport default Breaking;\n",{"ruleId":"61","severity":1,"message":"62","line":1,"column":17,"nodeType":"63","messageId":"64","endLine":1,"endColumn":26},{"ruleId":"61","severity":1,"message":"65","line":1,"column":28,"nodeType":"63","messageId":"64","endLine":1,"endColumn":36},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"61","severity":1,"message":"62","line":6,"column":27,"nodeType":"63","messageId":"64","endLine":6,"endColumn":36},{"ruleId":"61","severity":1,"message":"70","line":19,"column":7,"nodeType":"63","messageId":"64","endLine":19,"endColumn":12},{"ruleId":"61","severity":1,"message":"71","line":5,"column":9,"nodeType":"63","messageId":"64","endLine":5,"endColumn":15},{"ruleId":"61","severity":1,"message":"72","line":6,"column":9,"nodeType":"63","messageId":"64","endLine":6,"endColumn":14},{"ruleId":"61","severity":1,"message":"73","line":7,"column":9,"nodeType":"63","messageId":"64","endLine":7,"endColumn":17},{"ruleId":"61","severity":1,"message":"74","line":8,"column":9,"nodeType":"63","messageId":"64","endLine":8,"endColumn":14},{"ruleId":"61","severity":1,"message":"75","line":12,"column":10,"nodeType":"63","messageId":"64","endLine":12,"endColumn":15},{"ruleId":"61","severity":1,"message":"76","line":34,"column":9,"nodeType":"63","messageId":"64","endLine":34,"endColumn":21},{"ruleId":"61","severity":1,"message":"77","line":38,"column":9,"nodeType":"63","messageId":"64","endLine":38,"endColumn":18},{"ruleId":"78","severity":1,"message":"79","line":49,"column":27,"nodeType":"80","messageId":"81","endLine":49,"endColumn":29},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","no-native-reassign",["82"],"no-negated-in-lhs",["83"],"'image' is defined but never used.","'apiUrl' is assigned a value but never used.","'bbApi' is assigned a value but never used.","'bbRandom' is assigned a value but never used.","'bbAll' is assigned a value but never used.","'query' is assigned a value but never used.","'updateSearch' is assigned a value but never used.","'getSearch' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-global-assign","no-unsafe-negation"]